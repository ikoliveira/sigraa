@startuml
' Definindo as classes e enums
class Animal {
  - idade: int
  - sexo: bool
  - porte_fisico: PorteFisico
  - cor: str
  - especie: Especie
  + Animal(idade: int, sexo: bool, porte_fisico: str, cor: str, especie: Especie)
  - set_idade(idade: int): void
  + get_idade(): int
  - set_sexo(sexo: bool): void
  + get_sexo(): bool
  - set_porte_fisico(porte_fisico: PorteFisico): void
  + get_porte_fisico(): str
  - set_cor(cor: str): void
  + get_cor(): str
  - set_especie(especie: Especie): void
  + get_especie(): Especie
}

enum Especie {
  CACHORRO
  GATO
}

enum PorteFisico {
  PEQUENO
  MEDIO
  GRANDE
}

class Pessoa {
  - nome: str
  - idade: int
  - contatos: List<Contato>
  + Pessoa(nome: str, idade: int)
  - set_nome(nome: str): void
  + get_nome(): str
  - set_idade(idade: int): void
  + get_idade(): int
  - set_contatos(contatos: List<Contato>): void
  + get_contatos(): List<Contato>
}

class Contato {
  - tipo: str
  - valor: str
  + Contato(tipo: str, valor: str)
  - set_tipo(tipo: str): void
  - set_valor(valor: str): void
  + get_contato(): str
}

class Voluntario {
  + Voluntario(nome: str, idade: int, funcao: Funcao, escala: List<Escala>)
  - set_escala(codigo_escala: Escala, opcao: bool): void
  + get_funcao(): Funcao
  + set_funcao(funcao: Funcao): void
  - funcao: Funcao
  - escala: List<Escala>
}

enum Funcao {
  CAMPO
  ON_SITE
}

class Escala {
  - dia_semana: DayOfWeek
  - hora_inicio: LocalTime
  - hora_fim: LocalTime
  + Escala(dia_semana: DayOfWeek, hora_inicio: LocalTime, hora_fim: LocalTime)
  - set_dia_semana(dia_semana: DayOfWeek): void
  + get_dia_semana(): DayOfWeek
  - set_hora_inicio(hora_inicio: LocalTime): void
  + get_hora_inicio(): LocalTime
  - set_hora_fim(hora_fim: LocalTime): void
  + get_hora_fim(): LocalTime
}

class PretendenteAdocao {
  + PretendenteAdocao(nome: str, idade: int, endereco: str)
  - set_endereco(endereco: str): void
  + get_endereco(): str
  - endereco: str
}

class Adocao {
  + Adocao(animal: Animal, pretendente: PretendenteAdocao, data_adocao: LocalDate)
  - set_data_adocao(data_adocao: LocalDate): void
  + get_data_adocao(): LocalDate
  - set_animal(animal: Animal): void
  + get_animal(): Animal
  - set_pretendente(pretendente: PretendenteAdocao): void
  + get_pretendente(): PretendenteAdocao
  - data_adocao: LocalDate
}

class Doacao {
  + Doacao(tipo: str, quantidade: int, doador: Doador, data_doacao: LocalDate)
  - set_tipo(tipo: str): void
  + get_tipo(): str
  - set_quantidade(quantidade: int): void
  + get_quantidade(): int
  - set_doador(doador: Doador): void
  + get_doador(): Doador
  - set_data_doacao(data_doacao: LocalDate): void
  + get_data_doacao(): LocalDate
  - tipo: str
  - quantidade: int
  - doador: Doador
  - data_doacao: LocalDate
}

class Doador {
  + Doador(nome: str, idade: int, contatos: List<Contato>)
  - set_nome(nome: str): void
  + get_nome(): str
  - set_idade(idade: int): void
  + get_idade(): int
  - set_contatos(contatos: List<Contato>): void
  + get_contatos(): List<Contato>
}

class Resgate {
  + Resgate(data_resgate: LocalDate, localizacao: String, animais_resgatados: List<Animal>)
  - set_data_resgate(data_resgate: LocalDate): void
  + get_data_resgate(): LocalDate
  - set_localizacao(localizacao: String): void
  + get_localizacao(): String
  - set_animais_resgatados(animais_resgatados: List<Animal>): void
  + get_animais_resgatados(): List<Animal>
  - data_resgate: LocalDate
  - localizacao: String
  - animais_resgatados: List<Animal>
}

class ControleEstoque {
  + ControleEstoque()
  - adicionar_item(tipo: String, quantidade: int): void
  + remover_item(tipo: String, quantidade: int): void
  - consultar_estoque(): Map<String, Integer>
  - itens_estoque: Map<String, Integer>
}

class SGRAA {
  + SGRAA()
  + get_animal_service(): AnimalService
  + get_adocao_service(): AdocaoService
  + get_voluntario_service(): VoluntarioService
  + get_doacao_service(): DoacaoService
  + get_resgate_service(): ResgateService
  + get_controle_estoque_service(): ControleEstoqueService
  - animalService: AnimalService
  - adocaoService: AdocaoService
  - voluntarioService: VoluntarioService
  - doacaoService: DoacaoService
  - resgateService: ResgateService
  - controleEstoqueService: ControleEstoqueService
}

class AnimalService {
  + cadastrar_animal(animal: Animal): void
  + buscar_animal(id: int): Animal
  + atualizar_animal(animal: Animal): void
  + excluir_animal(id: int): void
}

class AdocaoService {
  + realizar_adocao(adocao: Adocao): void
  + buscar_adocoes_por_animal(animal: Animal): List<Adocao>
  + buscar_adocoes_por_pretendente(pretendente: PretendenteAdocao): List<Adocao>
}

class VoluntarioService {
  + cadastrar_voluntario(voluntario: Voluntario): void
  + buscar_voluntario(id: int): Voluntario
  + atualizar_voluntario(voluntario: Voluntario): void
  + excluir_voluntario(id: int): void
}

class DoacaoService {
  + registrar_doacao(doacao: Doacao): void
  + buscar_doacoes(): List<Doacao>
}

class ResgateService {
  + registrar_resgate(resgate: Resgate): void
  + buscar_resgates(): List<Resgate>
}

class ControleEstoqueService {
  + adicionar_item_estoque(item: String, quantidade: int): void
  + remover_item_estoque(item: String, quantidade: int): void
  + consultar_estoque(): Map<String, Integer>
}

class AnimalController {
  + cadastrar_animal(request: AnimalRequest): Response
  + buscar_animal(request: AnimalRequest): Response
  + atualizar_animal(request: AnimalRequest): Response
  + excluir_animal(request: AnimalRequest): Response
}

class AdocaoController {
  + realizar_adocao(request: AdocaoRequest): Response
  + buscar_adocoes_por_animal(request: AnimalRequest): Response
  + buscar_adocoes_por_pretendente(request: PretendenteAdocaoRequest): Response
}

class VoluntarioController {
  + cadastrar_voluntario(request: VoluntarioRequest): Response
  + buscar_voluntario(request: VoluntarioRequest): Response
  + atualizar_voluntario(request: VoluntarioRequest): Response
  + excluir_voluntario(request: VoluntarioRequest): Response
}

class DoacaoController {
  + registrar_doacao(request: DoacaoRequest): Response
  + buscar_doacoes(request: DoacaoRequest): Response
}




' Relacionamentos entre classes (associação, herança, composição)
SGRAA "1" o-- "1" AnimalService : usa
SGRAA "1" o-- "1" AdocaoService : usa
SGRAA "1" o-- "1" VoluntarioService : usa
SGRAA "1" o-- "1" DoacaoService : usa
SGRAA "1" o-- "1" ResgateService : usa
SGRAA "1" o-- "1" ControleEstoqueService : usa

' Relacionamento de herança e composição
Animal "1" *-- "1" Especie : é um
Animal "1" *-- "1" PorteFisico : tem um
Pessoa <|-- Voluntario : herda
Pessoa <|-- PretendenteAdocao : herda
Pessoa <|-- Doador : herda
Voluntario "1" *-- "0..*" Escala : possui
Voluntario "1" *-- "1" Funcao : desempenha
Adocao "1" *-- "1" Animal : envolve
Adocao "1" *-- "1" PretendenteAdocao : realizada_por
Doacao "1" *-- "1" Doador : feita_por
Doacao "1" *-- "0..1" Animal : para
Resgate "1" *-- "0..*" Animal : resgata
ControleEstoque "1" *-- "0..*" Doacao : recebe

' Relacionamentos dos Controllers com os Services
AnimalController ..> AnimalService : depende de
AdocaoController ..> AdocaoService : depende de
VoluntarioController ..> VoluntarioService : depende de
DoacaoController ..> DoacaoService : depende de
@enduml
